#from keras.models import Sequential
#from keras.layers import Input, Dense, Activation, Flatten
import keras.optimizers
#import tensorflow as tf
import numpy as np
import pandas as pd
import math
import random
import cache_env_new
from model_architectures import *
import cache_env_new_us
#import cache_env_new_linear
import csv
import array
import os
import argparse
import time

it_total_sites = 12
it_total_campaigns = 128
us_total_sites = 21
us_total_campaigns = 192

parser = argparse.ArgumentParser()
parser.add_argument('--data', type=str, 
                    default='/home/ubuntu/source2018_numeric_it_with_avro_order')
#parser.add_argument('--time_span', type=int, default=30000)
parser.add_argument('--time_span_add', type=int, default=30000)
parser.add_argument('--time_span_evict', type=int, default=30000)
parser.add_argument('--start_month', type=int, default=1)
parser.add_argument('--end_month', type=int, default=2)
parser.add_argument('--batch_size', type=int, default=32)
parser.add_argument('--out_dir', type=str,
                    default='results/results_ok_stats_async_quick_cleaned_huberTF')
#parser.add_argument('--out_name', type=str, default='dQL_add_evic.csv')
parser.add_argument('--lr', type=float, default=0.00001, help='learning rate')
parser.add_argument('--memory', type=int, default=1000000)
parser.add_argument('--decay_rate_add', type=float, default=0.00001)
parser.add_argument('--decay_rate_evict', type=float, default=0.00001)
#parser.add_argument('--warm_up_steps', type=int, default=30000)
parser.add_argument('--warm_up_steps_add', type=int, default=60000)
parser.add_argument('--warm_up_steps_evict', type=int, default=60000)
parser.add_argument('--eps_add_max', type=float, default=1.0)
parser.add_argument('--eps_add_min', type=float, default=0.1)
parser.add_argument('--eps_evict_max', type=float, default = 1.0)
parser.add_argument('--eps_evict_min', type=float, default = 0.1)
parser.add_argument('--gamma', type=float, default = 0.5)
parser.add_argument('--mm_omega', type=float, default = 1.0)
parser.add_argument('--load_add_weights_from_file', type = str, default = None)
parser.add_argument('--load_evict_weights_from_file', type = str, default = None)
parser.add_argument('--out_add_weights', type = str, default = 'weights_add.h5')
parser.add_argument('--out_evict_weights', type = str, 
                    default = 'weights_evict.h5')
parser.add_argument('--debug', type = bool, default = False)
parser.add_argument('--low_watermark', type = float, default = 0.)
parser.add_argument('--purge_delta', type = int, default = 50000)
parser.add_argument('--purge_frequency', type = int, default = 2)
parser.add_argument('--use_target_model', type = bool, default = False)
parser.add_argument('--target_update_frequency_add', type = int, default = 10000)
parser.add_argument('--target_update_frequency_evict', type = int, default = 10000)
parser.add_argument('--region', type = str, default = 'it')
parser.add_argument('--output_activation', type = str, default = 'sigmoid')
parser.add_argument('--cache_size', type = int, default = 104857600)
parser.add_argument('--report_choices', type = bool, default = False)
parser.add_argument('--bandwidth', type = float, default = 10.)
parser.add_argument('--write_everything', type = bool, default = False)


args = parser.parse_args()

if args.region == 'it':
    data_directory = args.data
    total_sites = it_total_sites
    total_campaigns = it_total_campaigns
elif args.region == 'us':
    data_directory = '/home/ubuntu/source2018_numeric_us_with_avro_order'
    total_sites = us_total_sites
    total_campaigns = us_total_campaigns
else:
    data_directory = args.data

print(data_directory)

input_len = 4 
#input_len = 7 + total_campaigns + total_sites


BATCH_SIZE = args.batch_size
#data_directory = args.data
learning_rate = args.lr
_startMonth = args.start_month
_endMonth = args.end_month
memory = args.memory
decay_rate_add = args.decay_rate_add
decay_rate_evict = args.decay_rate_evict
#no_training_steps = args.warm_up_steps
warm_up_steps_add = args.warm_up_steps_add
warm_up_steps_evict = args.warm_up_steps_evict
eps_add = args.eps_add_max
eps_evict = args.eps_evict_max
eps_add_min = args.eps_add_min
eps_evict_min = args.eps_evict_min
gamma = args.gamma
mm_omega = args.mm_omega
#time_span = args.time_span
time_span_add = args.time_span_add
time_span_evict = args.time_span_evict
debug = args.debug
low_watermark = args.low_watermark
purge_delta = args.purge_delta
purge_frequency = args.purge_frequency
use_target_model = args.use_target_model
target_update_frequency_add = args.target_update_frequency_add
target_update_frequency_evict = args.target_update_frequency_evict
output_activation = args.output_activation
cache_size = args.cache_size
report_choices = args.report_choices
bandwidth = args.bandwidth
write_everything = args.write_everything

out_directory = args.out_dir
#out_name = args.out_name
out_name = out_directory.split("/")[1] + '_results.csv'

if not os.path.isdir(out_directory):
    os.makedirs(out_directory)

if use_target_model == True:
    print('USING TARGET MODEL')

###### FIXED PARAMETERS ####################################################################################################################################

nb_actions = 2
observation_shape = (input_len,)
seed_ = 2019
DailyBandwidth1Gbit = bandwidth * (1000. / 8.) * 60. * 60. * 24.       #MB in a day with <bandwidth> Gbit/s

############## DEFINE ADD AND EVICT MODELS #########################################################################################################

model_add = small_dense(input_len, output_activation, nb_actions, learning_rate)
model_evict = small_dense(input_len, output_activation, nb_actions, learning_rate)
if use_target_model == True:
    target_model_add = small_dense(input_len, output_activation, nb_actions, learning_rate)
    target_model_evict = small_dense(input_len, output_activation, nb_actions, learning_rate)

if args.load_evict_weights_from_file is None == False:
    model_evict.load_weights(args.load_evict_weights_from_file)
if args.load_add_weights_from_file is None == False:
    model_add.load_weights(args.load_add_weights_from_file)

###### START LOOPING ############################################################################################################################
#environment = cache_env_new.env(
#    _startMonth, _endMonth, data_directory, out_directory, out_name, time_span, purge_delta)

if args.region == 'it':
    environment = cache_env_new.env(
        _startMonth, _endMonth, data_directory, out_directory, out_name, time_span_add, time_span_evict, purge_delta, output_activation, cache_size)

elif args.region == 'us' and output_activation == 'sigmoid':
    environment = cache_env_new_us.env(
        _startMonth, _endMonth, data_directory, out_directory, out_name, time_span, purge_delta)

#elif args.region == 'it' and output_activation == 'linear':
#    print('USING LINEAR ACTIVATION')
#    environment = cache_env_new_linear.env(
#        _startMonth, _endMonth, data_directory, out_directory, out_name, time_span, purge_delta)

#elif args.region == 'us' and output_activation == 'linear':
#    environment = cache_env_new_us_linear.env(
#        _startMonth, _endMonth, data_directory, out_directory, out_name, time_span, purge_delta)

random.seed(seed_)
adding_or_evicting = 0
step_add = 0
step_evict = 0
step_add_decay = 0
step_evict_decay = 0

addition_counter = 0
eviction_counter = 0

daily_add_actions = []
daily_evict_actions = []
daily_res_add_actions = []
daily_notres_add_actions = []
daily_res_evict_actions = []
daily_notres_evict_actions = []

res = [116731, 828304, 832129, 834347, 901365, 908566, 911003, 1170936, 1171350, 1354776]
res = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112]
res = [32768, 65536, 73731, 24580, 8195, 49158, 98310, 73740, 57363, 16405, 65558, 65560, 98330, 49179, 57372, 98332, 27, 65567, 90138, 90142, 73754, 16417, 73764, 81953, 16424, 42, 90154, 98348, 81965, 65580, 81962, 81968, 90161, 90160, 98355, 73776, 16434, 65584, 32823, 98363, 81982, 16450, 49218, 32834, 98373, 49224, 98377, 98379, 8270, 98384, 82, 41044, 98391, 16472, 57432, 82009, 16477, 82014, 73824, 98402, 98405, 98407, 98408, 32871, 57452, 73838, 82033, 98418, 41076, 98423, 120, 98427, 125, 49279, 98432, 24703, 16514, 32900, 98437, 82057, 41098, 32909, 73870, 8334, 32913, 16531, 49304, 8345, 73882, 24730, 32929, 57508, 98472, 82089, 98476, 16557, 8369, 16562, 73907, 65716, 8373, 82102, 186, 32955, 73916, 32957, 57535, 82112, 41155, 49348, 8389, 65732, 49351, 98503, 8390, 98506, 203, 98507, 98509, 82127, 32976, 41169, 16595, 82133, 32982, 98519, 98520, 8410, 41182, 49375, 57567, 98533, 98539, 235, 82158, 8431, 8430, 90356, 57590, 24825, 65785, 16637, 41221, 49414, 65799, 263, 57610, 73995, 266, 49422, 16655, 82190, 98577, 57615, 16659, 82195, 98581, 82198, 33049, 82205, 82207, 288, 65823, 57634, 291, 98595, 65829, 49448, 98603, 98604, 82222, 33070, 304, 305, 16690, 310, 82232, 98618, 33083, 8514, 98629, 33094, 33096, 90441, 33098, 24904, 98636, 98637, 90446, 98632, 74062, 74067, 57687, 98649, 98651, 8539, 98653, 82270, 355, 356, 82276, 24935, 98666, 49515, 41324, 41325, 98670, 368, 33138, 41333, 57718, 98679, 98680, 41337, 98682, 16760, 65917, 57726, 33149, 41349, 391, 90504, 49544, 41353, 90506, 49555, 90515, 65940, 90518, 24983, 82328, 74135, 8604, 49564, 74145, 24994, 90531, 8614, 65958, 65967, 98735, 82353, 433, 41395, 74161, 82356, 16821, 16823, 82361, 33212, 49596, 57790, 98751, 98748, 16829, 25027, 57796, 57799, 25032, 41416, 98763, 98764, 49613, 41422, 65998, 90576, 57808, 98765, 90579, 98767, 25045, 98774, 66007, 90582, 82393, 57812, 25053, 49629, 477, 33245, 8671, 98782, 90595, 33253, 98791, 66023, 25066, 16877, 98800, 33264, 82418, 98802, 57844, 25076, 98805, 49657, 98809, 16893, 57853, 8703, 57854, 66050, 82436, 49671, 33293, 98830, 66062, 74256, 82449, 49682, 74260, 41494, 41496, 41502, 33315, 25124, 66089, 16938, 98861, 41519, 16944, 66097, 8754, 90674, 57908, 74297, 74301, 74302, 25150, 66113, 33346, 57921, 579, 49741, 82510, 49742, 82513, 98902, 599, 600, 98906, 57947, 66146, 49762, 33383, 49772, 90734, 82543, 98928, 98929, 74354, 33397, 90742, 74358, 82552, 66172, 25214, 640, 98945, 98946, 25217, 17030, 41608, 98952, 74380, 98957, 82572, 98958, 41618, 98963, 58008, 665, 82586, 82585, 58012, 41633, 678, 98983, 74410, 98987, 33452, 98989, 58032, 82609, 98994, 33457, 74423, 66232, 8891, 17085, 82625, 33474, 706, 66244, 709, 25282, 90833, 41683, 74452, 723, 99030, 33495, 99032, 41688, 25301, 49884, 25309, 99041, 49890, 25316, 8934, 99048, 58089, 8937, 25324, 8941, 58095, 41712, 58098, 755, 49906, 41719, 41720, 82682, 25340, 8959, 770, 774, 49930, 33550, 58126, 49936, 17169, 99086, 99091, 90895, 8986, 90908, 66332, 33566, 99103, 99100, 99480, 58146, 802, 66333, 99110, 17192, 82728, 82734, 66351, 58161, 25396, 90935, 99128, 66361, 90936, 66363, 9020, 74555, 41787, 58176, 66371, 99141, 99143, 839, 58183, 49992, 99145, 90956, 99149, 82767, 74576, 82771, 74579, 74581, 74583, 99162, 33627, 82780, 9058, 82786, 90986, 25450, 99180, 877, 66414, 9069, 99184, 25458, 882, 41844, 41842, 90998, 82807, 888, 33658, 99195, 58237, 99200, 17281, 82820, 50054, 99206, 41864, 91014, 50058, 99207, 99208, 99213, 41870, 25486, 33680, 25490, 17298, 99220, 66450, 25494, 41878, 74649, 99225, 41882, 33697, 99233, 17314, 41890, 17319, 99239, 50089, 50091, 74671, 9138, 74675, 82878, 50114, 82883, 9156, 17349, 967, 99272, 9164, 41934, 99278, 82895, 74705, 99281, 9171, 99286, 25560, 33756, 25567, 33763, 25573, 50154, 25579, 50156, 9198, 91120, 99313, 33778, 25587, 66548, 1013, 99318, 9206, 25592, 82932, 74746, 82940, 99325, 17408, 58368, 99333, 82950, 91145, 17418, 1033, 41995, 1038, 66575, 66578, 91155, 58388, 74774, 33820, 82973, 99356, 50207, 74783, 66593, 82978, 99363, 25635, 82981, 25638, 50214, 42024, 99370, 25643, 9262, 50224, 42032, 99379, 99380, 17459, 17468, 17469, 33856, 42049, 1090, 42051, 25668, 66630, 42056, 50249, 91210, 99403, 1101, 17488, 66640, 50258, 99413, 91223, 99416, 99417, 9306, 33879, 91227, 83033, 17503, 25696, 66657, 9314, 58466, 66661, 1129, 91241, 25707, 9324, 91245, 25708, 83050, 83056, 33904, 42098, 99445, 58485, 42103, 1143, 66681, 42107, 25725, 1152, 99456, 17536, 50308, 99461, 83078, 33925, 42123, 1164, 91281, 33940, 25748, 83096, 25753, 50329, 99482, 42140, 17565, 91292, 42141, 42144, 42145, 17566, 1178, 50340, 1185, 9382, 99495, 91303, 83111, 91306, 50346, 17577, 74923, 99502, 66735, 74928, 99506, 58546, 25780, 99509, 58550, 17591, 74934, 99514, 91324, 99517, 9407, 58561, 25795, 83141, 83142, 42181, 66767, 34002, 83157, 1239, 66776, 58585, 17626, 25816, 9434, 34013, 99551, 42209, 83172, 66792, 91370, 17647, 9460, 40958, 66808, 99576, 25850, 99582, 50431, 1279, 99585, 99586, 34054, 25866, 1293, 17678, 91411, 91418, 83229, 17693, 9503, 1309, 99617, 99618, 99619, 42276, 83237, 66850, 25895, 58663, 99625, 99624, 42283, 75052, 9517, 99628, 99627, 1328, 91434, 83250, 9528, 1337, 99642, 1339, 17723, 42302, 9535, 34111, 99650, 99651, 1348, 75076, 34114, 42310, 42312, 66890, 1355, 17743, 50514, 25939, 99670, 50520, 58713, 75098, 75100, 9565, 25955, 42340, 91492, 17763, 34151, 99687, 75112, 17774, 58738, 9587, 50548, 58740, 99703, 75127, 17788, 75132, 66942, 17791, 99712, 1408, 42371, 91525, 1414, 17799, 99720, 42380, 25997, 66957, 99727, 1424, 91535, 83347, 26006, 26008, 99738, 75164, 99743, 50594, 42403, 17828, 17830, 26025, 99754, 75178, 34219, 50606, 83378, 66996, 99764, 99767, 99769, 42429, 91583, 83392, 26052, 58821, 99782, 34244, 50630, 75209, 26055, 42441, 9677, 91600, 26065, 26066, 75218, 17876, 99797, 91602, 91606, 34264, 83417, 58842, 1499, 99805, 17886, 83424, 1504, 34276, 83429, 99814, 83430, 9704, 1513, 26090, 99819, 67046, 75240, 58862, 75247, 99822, 17906, 99826, 34295, 9720, 99833, 91648, 50689, 99843, 50693, 34310, 9735, 99845, 50697, 75277, 50702, 99856, 42513, 91665, 9744, 75284, 26135, 91673, 1563, 17950, 75297, 34340, 1572, 17958, 99881, 50731, 9772, 42541, 1583, 9776, 34354, 99891, 17971, 9784, 50745, 9786, 34366, 99906, 34371, 34372, 9797, 58950, 99911, 75337, 91723, 26193, 83538, 42580, 58965, 9814, 1623, 58977, 58978, 18019, 50787, 9831, 58985, 34411, 50796, 99948, 9840, 1652, 75384, 67195, 83580, 18046, 18047, 75393, 99971, 67207, 99976, 67209, 67210, 99978, 18061, 99983, 99984, 42640, 91794, 99987, 42642, 67221, 75414, 99989, 50841, 59037, 99998, 91807, 50845, 9885, 83618, 59038, 50850, 1699, 59049, 91821, 83630, 1713, 42674, 67251, 34485, 50870, 91832, 9912, 34490, 67259, 9915, 1726, 42687, 50878, 9921, 59074, 83651, 34499, 50879, 26310, 91848, 75465, 42698, 18120, 34509, 67280, 34514, 59098, 91868, 42717, 75486, 26336, 18148, 34548, 50934, 83707, 83717, 34565, 50950, 34571, 42764, 9999, 75536, 34576, 91924, 83733, 83742, 67364, 18215, 50983, 83754, 91947, 75566, 75567, 91952, 50994, 1842, 67380, 75573, 67381, 34615, 51000, 42806, 91962, 59187, 34620, 59197, 51006, 75586, 1863, 83788, 42829, 18256, 1875, 75605, 42842, 10077, 92000, 67427, 92006, 75625, 83819, 34668, 51053, 67438, 42861, 59252, 34677, 67448, 1914, 75643, 67454, 92031, 26497, 83848, 59275, 42894, 10130, 10132, 34709, 1944, 67488, 67489, 18338, 10144, 18336, 59301, 18343, 26546, 51123, 18356, 42933, 10165, 34743, 26552, 42939, 59324, 42944, 59329, 92099, 18371, 51143, 75720, 34762, 1998, 75726, 92110, 92113, 67537, 51153, 59348, 51157, 42966, 26584, 83929, 2008, 2009, 10205, 34787, 51175, 10216, 42994, 26610, 26618, 59393, 83970, 2055, 59402, 51211, 51214, 75792, 26640, 92182, 43031, 92184, 26651, 34843, 43040, 10274, 2086, 18471, 10281, 92202, 2093, 67630, 34866, 84024, 67642, 92222, 75840, 92225, 18498, 10312, 75849, 43081, 34893, 43086, 67668, 59478, 67670, 75862, 26713, 67674, 26715, 43100, 75870, 26719, 43102, 43105, 51298, 59489, 26723, 84072, 75892, 67701, 10359, 34935, 67708, 75902, 43135, 34950, 34952, 18570, 51339, 84111, 2196, 43162, 75933, 10402, 18594, 59557, 59559, 75947, 26802, 59571, 43195, 18632, 51405, 51406, 35022, 92368, 18645, 59608, 59611, 18653, 2276, 51430, 26854, 92394, 67818, 43245, 51438, 35055, 10482, 2292, 51445, 35062, 51446, 92408, 92411, 76027, 26878, 43269, 2311, 26890, 92426, 67850, 18701, 2317, 67854, 76048, 67859, 26900, 10517, 35094, 51479, 84248, 84249, 26908, 92445, 59679, 98158, 35107, 51492, 35114, 35116, 26925, 18739, 51509, 18743, 35130, 2363, 2364, 67902, 92481, 26946, 10564, 43334, 84305, 67924, 26965, 51541, 92505, 67930, 59737, 2394, 92511, 76132, 26982, 35175, 2409, 2411, 67948, 10603, 76139, 67947, 26994, 2419, 26999, 51576, 84349, 59774, 67967, 18825, 84361, 59786, 76172, 76175, 92560, 10641, 84372, 76180, 84375, 10648, 35224, 10650, 76184, 92573, 18850, 84399, 59823, 51635, 76214, 59831, 18873, 68026, 10683, 35258, 2493, 43455, 2495, 84421, 2502, 10695, 84425, 51657, 43467, 59851, 2510, 43471, 10710, 2520, 18905, 27098, 27100, 18911, 68068, 68069, 18920, 10729, 27114, 43500, 18928, 59891, 2550, 51703, 84474, 43515, 68092, 51706, 51716, 92676, 59910, 51719, 10759, 84490, 92687, 92691, 18965, 51734, 35349, 27161, 18978, 10788, 35365, 18983, 59944, 59945, 68136, 10801, 35381, 2614, 43575, 43576, 51768, 92737, 27201, 27202, 27204, 51782, 76361, 27210, 2641, 19025, 19027, 27219, 10836, 27227, 92764, 84571, 60000, 27234, 10854, 68200, 19049, 68202, 35434, 2675, 92791, 27262, 51840, 84612, 19078, 35463, 10889, 35470, 84626, 43668, 2715, 2716, 43677, 84644, 92838, 19113, 92842, 2734, 35505, 35506, 2739, 43699, 43702, 60086, 43706, 60090, 84668, 68286, 76480, 27329, 27328, 27331, 27330, 35525, 10952, 10953, 76496, 43729, 92883, 84692, 27352, 68312, 51930, 27354, 60124, 35546, 35545, 60127, 84709, 84711, 76522, 51952, 10993, 76529, 43763, 19188, 68338, 10998, 68343, 84723, 11001, 35580, 43772, 92927, 68352, 43775, 43779, 51972, 60165, 11013, 43782, 68364, 27405, 35598, 84748, 2829, 51985, 84754, 43794, 68375, 84764, 11039, 27430, 92967, 84776, 76595, 68406, 84791, 52024, 2873, 60217, 27446, 11068, 52029, 43839, 92994, 68419, 35655, 43852, 84812, 35666, 11090, 27479, 84825, 2907, 11099, 19299, 2916, 2920, 76649, 76650, 76651, 2923, 84841, 43887, 68468, 60279, 19321, 52090, 43901, 27518, 60292, 60295, 84873, 84875, 68492, 2961, 68502, 84897, 35747, 52134, 60327, 43947, 2988, 68529, 43965, 84926, 76735, 60353, 93122, 52163, 84932, 19399, 52167, 84937, 35786, 60363, 19410, 76755, 19413, 76757, 60376, 52189, 76767, 27616, 84960, 60386, 84965, 19439, 93167, 3056, 68596, 3063, 19449, 68601, 35841, 27652, 52228, 76806, 35846, 93192, 27656, 85001, 44047, 76816, 11281, 52242, 44051, 27667, 85010, 93207, 19482, 44059, 52254, 27679, 52256, 44063, 93217, 27686, 76838, 85031, 19497, 19508, 60469, 68662, 52279, 19512, 27707, 85054, 3136, 85060, 76869, 27725, 44110, 60494, 60503, 52315, 93275, 27743, 35935, 68706, 76901, 76905, 76907, 11372, 3180, 3182, 76911, 11376, 27758, 52338, 68724, 19573, 19576, 3193, 85114, 68730, 85119, 27779, 68742, 27784, 93334, 19606, 60567, 60569, 60576, 52388, 60582, 36010, 85163, 44208, 60593, 93361, 76978, 27825, 93366, 3257, 85181, 27839, 68801, 27843, 93379, 76996, 52422, 44230, 36041, 52426, 44240, 3281, 36050, 85200, 27862, 68822, 44251, 36059, 11487, 85215, 93412, 77028, 44261, 60647, 68839, 27881, 19690, 3307, 36076, 68842, 36075, 93423, 77042, 52469, 68854, 93439, 19714, 77062, 36104, 77064, 27913, 60685, 36110, 19728, 93458, 27923, 36116, 3349, 44308, 68887, 93466, 36123, 36124, 77084, 3359, 85280, 60710, 19759, 3377, 36148, 36151, 11579, 52540, 36158, 11582, 27968, 19785, 3403, 85325, 52558, 68944, 93526, 85336, 27996, 19804, 36193, 77153, 36194, 85350, 11624, 85356, 36204, 93550, 77167, 3440, 11635, 77172, 36213, 68982, 3448, 28026, 28027, 85373, 93566, 44415, 3455, 85378, 60802, 60804, 68997, 28038, 85385, 11662, 93582, 69006, 44435, 3477, 28054, 44443, 85403, 28063, 44447, 28068, 19877, 3494, 44456, 36286, 28094, 69057, 44486, 77262, 69071, 52688, 44495, 11729, 93651, 93648, 44501, 36311, 60893, 52704, 28131, 3556, 36327, 28135, 77289, 19945, 93675, 85482, 93676, 3567, 52722, 44531, 85492, 77299, 77298, 11766, 93686, 60931, 19972, 44547, 19971, 11785, 28170, 77323, 28174, 44558, 85521, 3604, 60950, 77339, 36382, 60959, 19999, 77345, 36391, 52776, 20009, 85544, 60967, 77357, 77362, 69171, 69172, 3637, 20021, 93751, 77368, 69176, 20018, 93750, 3645, 20033, 93762, 20036, 69191, 85577, 77387, 28237, 3662, 44623, 36434, 85588, 69205, 69208, 11866, 36443, 77402, 61021, 28254, 28261, 61030, 61036, 3693, 52844, 28271, 20079, 28275, 93812, 61045, 36470, 85620, 36469, 69235, 52856, 69236, 36484, 20102, 36490, 3722, 85643, 3728, 69267, 85652, 52889, 3739, 69279, 3744, 28321, 85663, 44703, 85668, 77484, 11950, 77487, 44718, 11955, 69299, 69307, 77506, 61126, 77515, 36556, 52942, 77519, 61135, 20182, 11990, 61146, 61153, 28387, 61160, 28395, 36590, 93934, 44784, 28403, 52979, 28405, 77560, 93945, 52986, 36600, 52989, 3838, 20222, 93955, 3844, 93958, 69386, 93962, 12042, 28429, 36625, 93969, 36626, 28433, 61208, 53021, 93984, 36644, 20261, 61224, 12074, 93995, 77611, 12079, 28464, 77617, 85810, 3895, 12087, 53048, 77630, 69439, 94016, 36677, 69446, 44874, 85835, 69453, 20302, 85843, 94038, 44888, 28507, 61277, 44897, 77668, 61286, 77672, 85866, 20334, 69487, 44917, 61302, 12153, 28539, 69502, 12159, 20352, 69505, 36737, 94083, 53124, 3971, 61316, 85897, 77708, 20370, 12179, 69533, 20381, 20384, 69540, 77736, 28584, 94128, 20402, 85941, 28599, 12220, 44990, 94148, 77770, 12234, 85965, 20433, 36819, 20439, 45016, 85975, 12250, 12252, 20460, 12271, 94202, 69627, 4091, 53245, 20477, 69632, 4096, 20483, 61443, 45063, 86023, 36873, 53259, 69643, 61452, 4109, 86030, 28689, 4113, 4117, 4120, 94236, 45084, 45086, 69662, 94237, 36899, 45092, 61482, 53293, 86067, 77875, 69688, 36921, 28730, 20540, 86083, 36931, 28740, 94278, 94280, 69708, 86093, 45133, 61519, 61521, 20564, 45146, 94298, 61531, 69722, 12385, 77926, 86118, 94314, 20587, 45165, 53358, 28781, 28782, 36974, 45179, 12411, 61566, 77951, 36990, 20613, 94342, 94345, 53391, 94351, 53392, 94358, 53406, 4255, 61603, 94372, 77987, 20646, 4264, 37032, 4268, 28846, 37039, 45234, 86195, 4278, 78008, 94394, 53435, 94400, 61637, 53445, 12488, 37069, 12495, 37072, 28881, 86227, 94422, 37084, 69853, 61662, 28896, 20706, 53479, 37098, 53486, 4336, 69875, 45300, 12534, 12537, 20730, 86267, 45306, 69884, 37115, 94457, 20739, 61700, 4358, 45321, 61713, 45333, 94490, 37148, 61729, 94499, 37158, 69928, 69933, 78126, 61747, 94519, 69945, 61753, 12614, 12615, 12618, 69970, 94553, 86364, 37212, 94557, 29025, 78182, 12646, 78184, 20845, 78190, 78195, 78197, 20853, 4481, 53633, 53641, 45452, 70032, 4499, 78230, 12695, 94617, 20899, 20901, 4519, 86444, 29101, 20912, 86450, 12723, 20918, 20923, 45500, 78270, 37312, 4544, 4546, 70086, 45513, 94666, 20938, 29132, 70090, 94670, 70095, 61904, 29138, 20947, 70101, 94679, 29144, 37337, 37341, 78302, 20958, 20962, 61924, 70116, 45542, 53737, 70128, 61936, 61945, 61946, 53754, 94716, 20985, 12799, 78336, 37377, 20994, 12803, 86531, 78346, 86542, 53774, 21011, 29204, 29207, 45592, 29219, 37413, 29222, 37415, 78376, 4652, 94765, 45615, 12848, 4657, 12850, 53810, 29240, 4667, 12860, 86591, 21055, 4674, 78403, 94790, 53832, 12874, 12875, 21068, 62026, 12878, 78414, 45650, 78419, 78420, 78423, 12889, 37467, 70235, 45662, 4703, 12897, 78435, 94827, 45678, 37495, 12922, 45693, 86654, 86655, 45701, 86662, 4746, 21136, 62097, 4753, 4756, 62104, 86683, 45728, 53921, 86694, 53926, 62120, 53928, 94896, 45745, 62131, 45748, 70323, 29367, 78519, 12989, 78528, 86730, 62159, 4816, 13009, 21202, 21200, 70358, 86743, 70362, 94940, 13023, 53983, 86753, 62178, 78561, 70373, 37605, 62185, 70379, 94958, 4852, 86774, 21240, 45820, 94973, 37632, 45826, 29444, 62216, 70409, 29450, 29453, 86800, 13077, 29462, 21273, 62234, 95002, 78620, 29468, 45850, 70432, 95009, 95008, 21281, 21285, 13098, 86827, 78635, 54061, 78644, 95031, 54071, 21306, 45885, 13120, 95041, 95040, 29505, 21315, 95047, 62283, 95052, 70476, 86862, 54095, 54096, 45900, 13138, 95058, 78671, 86869, 29528, 13149, 45919, 54114, 13156, 29544, 78697, 45931, 21356, 37741, 95086, 70511, 4976, 70513, 70516, 29556, 21369, 37754, 70523, 78716, 62333, 4989, 95099, 37757, 70539, 86923, 86925, 86932, 95125, 95126, 78743, 37787, 70559, 54176, 86944, 95139, 62372, 95141, 37799, 62375, 95149, 86958, 37807, 95152, 86961, 13232, 5042, 5041, 62382, 70585, 5050, 21435, 62399, 70593, 70595, 86983, 78791, 95179, 70605, 21454, 95182, 37839, 29645, 46032, 21460, 21462, 62423, 21463, 5081, 78810, 54234, 70620, 95194, 46051, 54248, 78825, 13290, 37867, 21486, 95215, 29679, 95217, 37875, 78836, 62453, 95221, 46068, 78837, 95227, 95228, 78845, 87039, 95232, 78848, 62464, 54275, 62468, 62473, 78857, 21516, 46095, 70673, 29716, 21524, 70680, 70681, 5154, 37922, 70692, 29733, 95267, 46119, 87080, 21545, 46115, 70699, 54317, 62510, 54320, 95281, 5170, 46132, 37941, 54326, 46138, 95292, 37949, 46142, 95294, 78908, 95297, 5186, 21571, 13379, 78917, 29762, 46152, 5192, 54346, 95313, 87125, 13398, 95319, 13399, 13401, 29784, 13403, 87130, 70746, 70750, 87135, 21599, 62561, 37986, 95330, 62562, 5221, 5225, 46190, 13423, 5233, 13428, 70773, 95351, 21631, 46207, 54404, 87177, 13449, 46224, 21649, 70803, 54424, 38041, 38042, 13464, 95385, 95389, 13472, 79009, 95395, 62628, 87207, 62633, 38057, 70827, 79017, 95405, 95406, 54451, 87221, 13494, 38071, 13497, 54463, 62655, 62659, 70851, 46278, 79048, 13513, 5322, 79052, 38093, 70862, 70865, 95443, 95444, 46291, 62677, 95447, 79063, 79065, 13530, 79069, 87261, 29921, 79074, 79078, 79080, 54504, 54510, 29934, 21745, 79089, 62713, 38139, 21757, 62717, 21759, 29955, 54533, 87303, 46343, 29964, 46349, 29969, 87314, 29971, 21778, 13590, 38169, 54554, 70941, 46365, 54561, 29987, 95524, 95525, 5413, 95529, 13611, 95539, 38198, 13624, 30011, 95548, 38205, 30012, 46399, 46401, 95554, 95555, 21829, 87366, 95558, 87368, 95561, 95562, 87371, 13642, 54604, 54600, 21842, 95575, 30041, 95577, 95579, 13660, 95581, 5472, 5475, 62820, 71012, 79204, 79209, 54633, 62830, 95599, 54640, 71025, 13679, 5489, 95604, 95606, 62839, 79223, 79222, 30074, 95611, 87414, 21885, 46455, 46463, 46465, 13699, 95619, 13703, 95625, 62859, 5516, 95629, 87438, 87440, 5525, 71062, 38298, 79258, 13722, 38302, 38305, 79269, 71079, 30124, 30125, 95661, 5551, 95667, 54707, 38323, 95670, 62903, 30136, 46522, 5566, 21953, 79300, 38343, 95688, 95689, 5577, 38346, 79308, 79303, 62928, 79314, 54739, 5588, 21971, 95701, 87511, 21973, 95708, 62942, 79327, 79328, 46560, 62951, 21992, 54761, 87529, 46569, 54765, 62958, 38384, 54771, 95731, 46581, 79352, 95737, 30200, 13819, 22012, 79357, 54781, 38397, 71168, 62973, 30210, 71166, 79365, 62984, 95754, 30218, 5644, 62987, 46610, 46611, 95764, 62996, 38421, 95767, 13843, 5660, 95775, 95776, 71209, 79403, 95790, 38449, 54834, 46642, 63026, 54838, 79415, 63031, 38458, 38461, 30269, 79421, 87616, 13891, 46662, 95815, 46664, 22096, 38482, 87638, 38486, 30298, 63068, 63073, 54883, 87651, 5731, 79462, 95847, 63081, 95850, 79471, 54899, 30324, 38517, 5748, 38519, 95866, 54908, 22141, 22142, 79484, 87681, 54914, 95874, 87683, 95877, 30341, 79499, 95884, 95885, 63118, 22159, 95887, 5780, 95895, 71320, 95897, 46744, 38554, 46751, 5793, 30371, 22180, 30373, 87719, 38569, 95914, 13994, 95915, 5807, 54961, 22193, 87731, 63159, 87736, 38590, 95935, 5828, 46789, 5831, 79560, 71369, 79565, 14030, 22227, 95962, 63195, 14046, 5855, 14052, 95974, 79591, 95975, 79595, 14060, 95981, 87789, 5871, 95988, 22261, 22263, 96000, 79619, 96005, 79621, 5893, 46853, 96010, 46859, 5903, 46863, 22289, 96018, 63251, 96020, 38677, 30486, 55063, 5911, 46873, 96023, 96026, 63259, 96029, 38686, 22303, 71454, 55068, 63265, 87843, 38693, 55079, 87851, 46892, 96043, 22318, 87855, 46896, 5942, 46902, 5944, 96057, 96059, 5949, 71485, 46913, 63299, 38725, 79686, 96071, 46920, 96073, 38736, 38744, 22365, 38753, 96099, 46949, 38759, 46952, 63337, 63338, 38763, 96109, 71534, 87924, 96121, 46969, 71547, 38780, 63354, 63353, 46975, 96129, 63361, 55171, 71556, 55177, 96137, 96138, 6029, 14222, 96143, 87952, 71570, 87955, 30613, 55189, 96150, 87957, 6041, 96154, 96155, 22423, 6038, 71583, 30624, 79781, 71591, 38823, 22441, 14251, 79788, 22445, 71602, 87987, 87989, 22457, 6073, 71611, 38843, 6077, 30654, 79808, 88000, 30661, 14278, 63435, 63437, 22478, 63439, 38865, 79829, 96217, 38877, 96223, 88032, 47071, 30693, 71654, 79847, 63463, 30705, 71669, 96246, 96247, 30711, 38901, 14328, 88063, 88065, 22530, 47108, 71686, 55302, 22536, 79884, 71694, 55313, 63506, 55321, 96296, 96298, 96299, 22571, 88112, 79921, 30771, 96308, 79925, 71734, 38971, 38975, 88129, 38982, 96330, 22602, 96332, 38989, 38986, 79949, 96337, 47191, 71770, 22620, 22621, 6238, 39007, 14432, 39009, 14434, 47200, 96354, 39012, 47202, 96366, 55407, 30832, 71793, 96369, 71796, 63605, 55413, 96373, 96375, 79994, 96379, 79996, 6267, 22658, 88194, 71810, 14472, 96393, 71818, 71819, 6284, 71820, 96399, 55445, 14488, 80024, 96409, 96408, 63647, 63649, 80034, 22693, 80038, 96425, 39083, 39084, 96429, 80046, 88239, 22706, 30902, 6326, 39096, 63673, 71870, 80065, 14531, 39108, 96454, 55494, 39116, 39117, 6349, 14542, 39120, 96468, 47321, 96474, 96475, 6364, 63708, 96480, 96481, 96483, 14565, 39143, 22761, 6380, 71917, 6382, 96495, 71920, 96498, 80114, 80117, 80122, 96508, 22780, 96510, 14590, 96512, 6403, 71942, 47368, 96521, 14601, 47371, 63756, 47377, 96532, 88344, 63769, 96540, 55581, 14626, 39203, 14628, 71974, 55590, 47404, 96558, 22834, 14645, 6455, 80184, 39226, 88379, 14652, 39233, 14659, 14660, 22854, 39241, 14666, 47436, 6482, 47444, 31061, 63831, 63833, 39262, 47455, 63843, 96612, 96614, 72039, 55656, 47464, 80234, 55659, 22895, 6513, 80242, 96627, 47475, 6514, 96630, 96635, 22908, 80255, 80262, 72070, 55692, 96653, 6547, 96659, 55700, 31127, 96664, 63898, 72095, 47520, 96673, 88483, 80297, 96683, 96684, 22957, 72110, 63919, 80303, 55730, 96691, 96693, 80310, 63926, 39349, 80313, 72122, 96700, 96704, 55748, 88520, 80329, 47566, 96720, 88528, 47575, 63962, 55772, 55774, 39392, 23008, 55779, 80356, 6629, 96741, 14823, 31209, 39402, 80363, 39411, 6644, 80373, 55799, 47607, 63993, 80379, 72188, 80381, 14843, 23036, 23040, 23044, 47622, 96774, 23048, 31243, 6667, 64016, 23057, 96787, 6677, 39450, 64029, 47646, 55839, 31263, 6687, 80418, 64035, 64031, 64040, 14889, 6698, 96810, 55852, 64043, 47661, 31279, 55856, 31277, 6702, 47665, 72245, 6709, 88631, 31289, 6714, 64059, 96827, 72254, 96832, 96834, 96838, 14920, 96840, 88648, 39499, 80459, 23116, 47694, 72270, 47696, 96850, 6738, 55894, 96856, 55899, 96862, 64105, 72299, 23150, 88689, 55924, 80502, 96889, 23162, 23163, 96890, 80507, 31358, 96894, 14977, 96899, 96900, 72325, 72327, 96907, 47755, 72335, 31376, 96913, 96912, 14995, 88726, 96923, 31387, 96925, 88734, 80548, 96935, 39594, 15019, 96940, 88752, 88753, 31415, 55992, 96953, 96954, 6842, 96956, 47805, 31423, 47809, 72388, 31428, 72390, 31432, 64201, 47817, 15051, 15055, 31440, 80591, 47828, 88789, 31446, 39638, 96981, 47838, 56034, 23267, 64227, 56035, 31462, 9510, 56042, 97008, 97010, 47859, 64248, 39674, 47867, 23291, 97018, 64254, 64252, 72448, 6916, 6917, 97031, 56071, 97032, 97034, 97035, 15114, 15117, 56076, 23312, 47889, 39704, 72475, 47900, 39709, 47906, 15138, 88868, 6949, 47907, 97065, 72490, 31530, 47916, 31532, 88873, 97071, 6953, 97076, 56119, 6970, 97082, 23356, 39745, 39748, 47941, 97094, 6982, 64326, 97097, 97092, 15178, 31560, 6989, 97101, 64333, 80720, 31570, 88914, 97108, 64343, 97116, 97118, 47968, 80739, 23398, 56168, 39784, 64365, 97134, 88943, 23408, 31602, 39794, 97140, 56181, 39796, 56184, 47993, 31608, 15228, 31619, 48010, 39820, 39822, 39828, 72602, 15262, 97182, 97184, 72611, 48037, 48038, 39847, 31658, 31659, 72620, 31660, 97195, 64430, 80816, 7090, 48051, 97204, 97202, 48056, 23482, 39868, 97212, 64448, 97217, 56256, 64450, 97221, 31686, 64459, 97229, 31693, 89040, 39889, 72658, 64468, 56277, 15318, 97240, 23513, 80861, 48099, 39908, 39907, 7139, 23527, 80868, 64483, 31722, 15339, 56302, 97263, 80880, 89072, 31730, 80882, 72692, 72693, 97268, 7159, 23543, 56314, 48122, 7167, 64513, 72705, 64515, 72709, 72713, 15369, 97297, 64531, 39955, 80917, 48154, 48155, 97308, 97307, 72730, 64541, 97317, 80935, 89128, 56361, 15400, 72747, 23595, 23592, 89135, 97328, 39987, 7219, 97333, 48184, 72761, 15418, 72765, 64574, 39998, 15426, 23618, 64582, 56391, 72774, 40006, 31819, 23630, 97360, 48208, 40018, 15444, 40021, 40022, 40023, 15448, 97370, 56411, 72797, 97373, 97374, 48222, 48226, 56419, 72806, 64620, 97390, 31854, 97391, 97393, 48243, 31859, 64629, 97396, 40056, 48250, 23680, 89217, 40066, 31874, 97409, 48259, 48262, 15495, 97408, 97410, 64641, 15490, 40076, 64653, 97422, 15502, 48273, 56466, 72852, 48276, 40085, 56470, 7324, 40096, 7338, 81068, 7340, 15537, 89266, 56500, 31925, 72884, 40119, 97464, 40120, 48315, 72898, 56515, 89284, 15556, 56520, 97481, 97482, 64718, 97489, 48338, 7379, 97492, 64725, 7382, 97493, 89306, 64733, 31965, 15583, 7393, 15585, 97506, 72932, 64739, 15590, 40167, 15587, 56555, 7403, 89325, 7404, 15599, 97521, 89330, 23793, 56565, 89336, 72953, 40187, 97533, 40190, 97537, 15619, 7428, 89358, 72976, 15634, 89367, 97563, 7451, 64798, 40223, 48416, 7457, 56615, 97576, 73000, 81194, 15659, 32049, 97588, 73013, 56630, 56631, 48438, 97594, 89404, 73023, 73027, 97603, 40261, 89411, 56647, 15687, 23883, 89422, 56658, 81236, 48472, 56664, 73056, 40288, 56674, 64866, 89443, 32098, 97640, 40298, 48493, 23917, 89456, 64881, 32115, 97651, 32119, 23928, 73082, 15738, 64894, 48511, 7553, 7556, 40325, 32135, 7560, 89482, 89483, 64907, 97678, 56723, 32148, 89494, 48536, 64925, 73119, 40352, 64931, 97702, 32166, 73128, 48554, 40364, 40367, 73137, 97718, 97720, 64955, 7612, 56765, 15807, 81344, 40383, 97730, 7624, 89544, 24010, 73165, 7629, 89554, 7637, 97751, 64985, 64986, 97755, 97756, 24026, 81374, 15835, 7645, 97761, 97767, 97768, 89577, 7660, 48621, 97774, 56813, 97779, 56826, 40443, 97789, 48638, 15874, 97797, 97799, 15880, 97801, 97802, 97804, 97805, 32270, 32272, 65041, 89619, 7701, 24086, 24087, 7706, 97820, 48669, 65055, 73249, 97827, 40484, 97830, 15911, 32294, 56872, 97834, 65068, 56882, 89652, 97845, 24118, 65077, 40504, 24124, 65085, 81474, 24130, 15943, 81480, 73289, 89673, 73291, 15947, 97869, 40526, 48720, 7768, 97887, 15970, 97893, 97894, 32358, 40559, 48752, 32368, 97906, 89715, 81525, 48758, 89719, 97910, 7802, 40572, 48767, 81536, 97921, 65156, 89733, 73349, 24198, 7813, 97926, 97931, 24207, 97937, 7826, 81556, 97944, 16027, 97950, 40607, 40611, 65187, 56998, 57000, 65195, 97965, 89776, 89778, 73394, 32437, 81591, 89797, 97991, 7883, 97998, 73425, 57042, 89811, 24280, 81632, 98018, 98019, 40676, 65252, 16106, 40684, 73453, 24302, 16111, 7922, 81652, 16120, 98042, 32507, 89853, 81663, 98050, 81668, 89861, 48903, 89864, 57098, 81677, 48918, 24343, 98071, 48921, 65305, 57113, 73500, 32539, 98078, 81700, 98087, 16167, 57127, 32554, 24363, 24364, 48942, 89903, 24371, 40758, 57143, 96025, 57147, 98109, 57151, 8001, 81734, 24392, 24394, 98123, 24395, 16204, 40782, 24403, 16213, 98134, 57178, 98140, 57181, 65374, 81760, 32610, 89956, 73573, 98150, 32615, 57192, 24428, 98157, 65388, 89967, 81775, 8049, 89968, 89971, 81780, 49013, 98165, 16245, 65400, 98169, 89974, 40823, 8056, 40836, 98181, 98187, 40844, 32657, 49046, 8087, 98201, 65436, 65438, 90015, 40862, 40866, 73635, 81829, 16297, 8107, 98219, 16301, 98225, 24503, 40888, 90042, 24509, 98238, 40894, 32704, 65473, 65477, 40902, 98246, 98249, 81865, 24524, 24529, 40916, 73685, 98262, 57301, 65496, 32729, 98268, 40928, 57314, 98276, 16360, 81903, 32755, 98291, 73717, 49142, 16375, 98293, 24565, 8187, 40956, 49149, 73726, 8191]


with open(out_directory + '/occupancy.csv', 'w') as file:
    writer = csv.writer(file)
    writer.writerow(['occupancy'])

end = False
#now = time.time()
while end == False:
#    before = now
#    now = time.time()
#    with open(out_directory + '/stats.csv', 'a') as f:
#        writer = csv.writer(f)
#        writer.writerow([now - before, len(environment._cache._stats._files), len(environment._cache._cached_files)])

    #if (environment.curDay+1) % purge_frequency == 0 and environment.curRequest == 0:
    #    environment.purge()

    ######## ADDING ###########################################################################################################
    if adding_or_evicting == 0:
        if use_target_model == True:
            if step_add % target_update_frequency_add == 0:
                target_model_add.set_weights(model_add.get_weights()) 
                #print('UPDATED WEIGHTS')
        #print('filenames in window:' + str(len(environment._eviction_window_elements)))
        #counter = 0
        #for item in environment._eviction_window_elements.values():
        #    if len(item) > 1:
        #        counter += 1
        #print('number of filenames with more than 1 pending action: ' + str(counter))
        # UPDATE STUFF
        step_add += 1
        if eps_add > eps_add_min and step_add > warm_up_steps_add:
            step_add_decay += 1
            eps_add = math.exp(- decay_rate_add * step_add_decay)
        cur_values = environment.curValues
        if step_add % 1000 == 0:
            print('epsilon = ' + str(eps_add))
        
        # GET ACTION
        rnd_eps = random.random()
        if rnd_eps < eps_add or step_add < warm_up_steps_add:
            rnd = random.random()
            if rnd < 0.5:
                action = 0
            else:
                action = 1
        else:
            cur_values_ = np.reshape(cur_values, (1, input_len))
            action = np.argmax(model_add.predict(cur_values_))
        if write_everything == True:
            action = 0

        hit = environment.check_if_current_is_hit()
        anomalous = environment.current_cpueff_is_anomalous()

               
        #if debug == True and anomalous == False:
        #    print('ADDING-------------------------------------------------------------------------------------')
        #    print('CURVALUES')
        #    cur_values_ = np.reshape(cur_values, (1, input_len))
        #    print(cur_values)
        

        # GET THIS REQUEST
        if anomalous == False:
            if environment._cache._dailyReadOnMiss / DailyBandwidth1Gbit * 100 < 95. or hit == True:
                environment.add_request(action)
                curFilename, curSize = environment.get_filename_and_size_of_current_request()

        '''
        if report_choices == True:
            daily_add_actions.append(action) 
            if environment.curRequest == 0 and environment.curDay > 0:   
                with open(out_directory + '/addition_choices_{}.csv'.format(environment.curDay), 'w') as file:
                    writer = csv.writer(file)
                    writer.writerow(['addition_choice'])
                    for i in range(0,len(daily_add_actions)):
                        writer.writerow([daily_add_actions[i]])
                with open(out_directory + '/eviction_choices_{}.csv'.format(environment.curDay), 'w') as file:
                    writer = csv.writer(file)
                    writer.writerow(['eviction_choice'])
                    for i in range(0,len(daily_evict_actions)):
                        writer.writerow([daily_evict_actions[i]])
                daily_add_actions.clear()
                daily_evict_actions.clear()
        '''
        
        #print(str(environment.curDay) + ' - ' + str(environment.curRequest))
        if report_choices == True:
            daily_add_actions.append(action) 
            if curFilename in res:
                daily_res_add_actions.append(action)
            else:
                daily_notres_add_actions.append(action) 
            if environment.curRequest == 0 and environment.curDay > 0:   
                with open(out_directory + '/addition_choices_{}.csv'.format(environment.curDay), 'w') as file:
                    writer = csv.writer(file)
                    writer.writerow(['addition_choice'])
                    for i in range(0,len(daily_add_actions)):
                        writer.writerow([daily_add_actions[i]])
                with open(out_directory + '/eviction_choices_{}.csv'.format(environment.curDay), 'w') as file:
                    writer = csv.writer(file)
                    writer.writerow(['eviction_choice'])
                    for i in range(0,len(daily_evict_actions)):
                        writer.writerow([daily_evict_actions[i]])
                with open(out_directory + '/res_addition_choices_{}.csv'.format(environment.curDay), 'w') as file:
                    writer = csv.writer(file)
                    writer.writerow(['addition_choice'])
                    for i in range(0,len(daily_res_add_actions)):
                        writer.writerow([daily_res_add_actions[i]])
                with open(out_directory + '/notres_addition_choices_{}.csv'.format(environment.curDay), 'w') as file:
                    writer = csv.writer(file)
                    writer.writerow(['addition_choice'])
                    for i in range(0,len(daily_notres_add_actions)):
                        writer.writerow([daily_notres_add_actions[i]])
                with open(out_directory + '/res_eviction_choices_{}.csv'.format(environment.curDay), 'w') as file:
                    writer = csv.writer(file)
                    writer.writerow(['eviction_choice'])
                    for i in range(0,len(daily_res_evict_actions)):
                        writer.writerow([daily_res_evict_actions[i]])
                with open(out_directory + '/notres_eviction_choices_{}.csv'.format(environment.curDay), 'w') as file:
                    writer = csv.writer(file)
                    writer.writerow(['eviction_choice'])
                    for i in range(0,len(daily_notres_evict_actions)):
                        writer.writerow([daily_notres_evict_actions[i]])
                daily_add_actions.clear()
                daily_evict_actions.clear()
                daily_res_add_actions.clear()
                daily_notres_add_actions.clear()                
                daily_res_evict_actions.clear()
                daily_notres_evict_actions.clear()
        


        if step_add % 1000 == 0:
            print('Request: ' + str(environment.curRequest) + ' / ' + str(environment.df_length) + '  -  Occupancy: ' + str(round(environment._cache.capacity,2)) 
                + '%  -  ' + 'Hit rate: ' + str(round(environment._cache._hit/(environment._cache._hit + environment._cache._miss)*100,2)) +'%' + ' ACTION: ' +  str(action))
            print()
        
        '''
        # IF IT'S ADDING IS OVER, GIVE REWARD TO ALL EVICTION ACTIONS
        if environment._cache.capacity > environment._cache._h_watermark:
            environment.clear_remaining_evict_window()
        '''

        #PURGE UNUSED STATS
        if (environment.curDay+1) % purge_frequency == 0 and environment.curRequest == 0:
            environment.purge()
        
        # IF ADDING IS NOT OVER, GET NEXT VALUES AND PREPARE ACTION TO BE REWARDED, GIVING EVENTUAL REWARD
        if environment._cache.capacity <= environment._cache._h_watermark:
            next_values = environment.get_next_request_values()
            if anomalous == False:
                if environment._cache._dailyReadOnMiss / DailyBandwidth1Gbit * 100 < 95. or hit == True:
                    #environment.update_windows_getting_eventual_rewards_waiting(
                        #adding_or_evicting, curFilename, cur_values, next_values, action)
                    environment.update_windows_getting_eventual_rewards_waiting_no_next_values(
                        adding_or_evicting, curFilename, cur_values, action)
        
        # REMOVE THE FIRST DUMMY ELEMENT IN MEMORY
        if step_add == 1000:
            environment.add_memory_vector = np.delete(
                environment.add_memory_vector, 0, 0)

        # LOOK PERIODICALLY FOR INVALIDATED PENDING ADDING AND EVICTING ACTIONS
        if step_add % 5000:
            environment.look_for_invalidated_add_evict()

        # KEEP MEMORY LENGTH LESS THAN LIMIT
        while(environment.add_memory_vector.shape[0] > memory):
            environment.add_memory_vector = np.delete(
                environment.add_memory_vector, 0, 0)
    

        # TRAIN NETWORK
        if step_add > warm_up_steps_add:
            batch = environment.add_memory_vector[np.random.randint(0, environment.add_memory_vector.shape[0], BATCH_SIZE), :]
            #train_cur_vals ,train_actions, train_rewards, train_next_vals = np.split(batch, [input_len, input_len + 1, input_len + 2] , axis = 1)
            train_cur_vals ,train_actions, train_rewards = np.split(batch, [input_len, input_len + 1] , axis = 1)
            target = model_add.predict_on_batch(train_cur_vals)
            #if debug == True:
            #    print('PREDICT ON BATCH')
            #    print(target)
            #    print()
            if use_target_model == False:
                #predictions = model_add.predict_on_batch(train_next_vals)
                predictions = model_add.predict_on_batch(train_cur_vals)
                for i in range(0,BATCH_SIZE):
                    action_ = int(train_actions[i])
                    target[i,action_] = train_rewards[i] + gamma * mellowmax(mm_omega, predictions[i])   
            else:
                #predictions = target_model_add.predict_on_batch(train_next_vals)
                predictions = target_model_add.predict_on_batch(train_cur_vals)
                for i in range(0,BATCH_SIZE):
                    action_ = int(train_actions[i])               
                    target[i,action_] = train_rewards[i] + gamma * max(predictions[i])  
            
            model_add.train_on_batch(train_cur_vals, target)

    ### EVICTING #############################################################################################################
    elif adding_or_evicting == 1: 
        
        if use_target_model == True:
            if step_evict % target_update_frequency_evict == 0:
                target_model_evict.set_weights(model_evict.get_weights()) 
        
        # UPDATE STUFF
        step_evict += 1
        if eps_evict > eps_evict_min and step_evict > warm_up_steps_evict:
            step_evict_decay += 1
            eps_evict = math.exp(- decay_rate_evict * step_evict)
        cur_values = environment.curValues
        if step_evict % 1000 == 0:
            print('epsilon = ' + str(eps_evict))
        
        # GET ACTION
        rnd_eps = random.random()
        if rnd_eps < eps_add or step_evict < warm_up_steps_evict:
            rnd = random.random()
            if rnd < 0.5:
                action = 0
            else:
                action = 1
        else:
            cur_values_ = np.reshape(cur_values, (1, input_len))
            action = np.argmax(model_evict.predict(cur_values_))
        if debug == True:
            print('FREEING-------------------------------------------------------------------------------------')
            print('CURVALUES')
        if debug == True:
            cur_values_ = np.reshape(cur_values, (1, input_len))
            print(cur_values_)
            print()

        # IF ADDING IS NOT OVER, GET NEXT VALUES AND PREPARE ACTION TO BE REWARDED, GIVING EVENTUAL REWARD
        curFilename, curSize = environment.get_filename_and_size_of_current_cache_file()
        if action == 1:
            #del environment._cache._cached_files[curFilename]
            environment._cache._cached_files.remove(curFilename)
            environment._cache._size -= curSize
            environment._cache._deleted_data += curSize
        
        if report_choices == True:
            daily_evict_actions.append(action)
            if curFilename in res:
                daily_res_evict_actions.append(action)
            else:
                daily_notres_evict_actions.append(action) 


        if step_evict % 1000 == 0:
            print('Freeing memory ' + str(environment._cached_files_index) + '/' + str(len(environment._cache._cached_files_keys)) + 
                    '  -  Occupancy: ' + str(round(environment._cache.capacity,2)) + '%  - action: ' + str(action))
            print()
        
        # IF EVICTING IS NOT OVER, GET NEXT VALUES AND PREPARE ACTION TO BE REWARDED, GIVING EVENTUAL REWARD
        if environment._cached_files_index + 1 != len(environment._cache._cached_files_keys) and environment._cache.capacity >= low_watermark:
            next_values = environment.get_next_file_in_cache_values()
            #environment.update_windows_getting_eventual_rewards_waiting(
                #adding_or_evicting, curFilename, cur_values, next_values, action)
            environment.update_windows_getting_eventual_rewards_waiting_no_next_values(
                adding_or_evicting, curFilename, cur_values, action)
        
        # REMOVE THE FIRST DUMMY ELEMENT IN MEMORY
        if step_evict == 1000:
            environment.evict_memory_vector = np.delete(environment.evict_memory_vector, 0, 0)

        # KEEP MEMORY LENGTH LESS THAN LIMIT
        while(environment.evict_memory_vector.shape[0] > memory):
            environment.evict_memory_vector = np.delete(environment.evict_memory_vector, 0, 0)
        
        # TRAIN NETWORK
        if step_evict > warm_up_steps_evict:
            batch = environment.evict_memory_vector[np.random.randint(0, environment.evict_memory_vector.shape[0], BATCH_SIZE), :]
            #train_cur_vals ,train_actions, train_rewards, train_next_vals = np.split(batch, [input_len, input_len+1, input_len+2] , axis = 1)
            train_cur_vals ,train_actions, train_rewards = np.split(batch, [input_len, input_len+1] , axis = 1)
            target = model_evict.predict_on_batch(train_cur_vals)
            if debug == True:
                print('PREDICT ON BATCH')
                print(target)
                print()
            if use_target_model == False:
                #predictions = model_evict.predict_on_batch(train_next_vals)
                predictions = model_evict.predict_on_batch(train_cur_vals)
                for i in range(0,BATCH_SIZE):  
                    action_ = int(train_actions[i])
                    target[i,action_] = train_rewards[i] + gamma * mellowmax(mm_omega, predictions[i])  
            else:
                #predictions = target_model_add.predict_on_batch(train_next_vals)
                predictions = target_model_add.predict_on_batch(train_cur_vals)
                for i in range(0,BATCH_SIZE):  
                    action_ = int(train_actions[i])
                    target[i,action_] = train_rewards[i] + gamma * max(predictions[i])  
            
            model_evict.train_on_batch(train_cur_vals, target)

    #### STOP ADDING ################################################################################################################################
    if adding_or_evicting == 0 and environment._cache.capacity > environment._cache._h_watermark:
        adding_or_evicting = 1 
        addition_counter += 1
        environment._cache._cached_files_keys = list(environment._cache._cached_files)
        random.shuffle(environment._cache._cached_files_keys)
        to_print = np.asarray(environment._cache._cached_files_keys)
        environment._cached_files_index = -1
        cur_values = environment.get_next_file_in_cache_values()
        print('STARTED EVICTION AT: ' + str(step_add) + ' - files in cache are ' + str(np.sort(to_print)))
        print()

        
    ### STOP EVICTING ################################################################################################################################
    if adding_or_evicting == 1 and (environment._cached_files_index + 1 == len(environment._cache._cached_files_keys) or environment._cache.capacity < low_watermark):
        with open(out_directory + '/occupancy.csv', 'a') as file:
            writer = csv.writer(file)
            writer.writerow([environment._cache.capacity])
        adding_or_evicting = 0
        eviction_counter += 1
        cur_values = environment.get_next_request_values()

    ### END ####################################################################################################################################
    if environment.curDay == environment._idx_end:
        end = True
        model_add.save_weights(out_directory + args.out_add_weights)
        model_evict.save_weights(out_directory + args.out_evict_weights)


'''
model_evict = Sequential()
model_evict.add(Dense(16, input_dim=input_len))
model_evict.add(Activation('sigmoid'))
model_evict.add(Dense(32))
model_evict.add(Activation('sigmoid'))
model_evict.add(Dense(64))
model_evict.add(Activation('sigmoid'))
model_evict.add(Dense(128))
model_evict.add(Activation('sigmoid'))
model_evict.add(Dense(64))
model_evict.add(Activation('sigmoid'))
model_evict.add(Dense(32))
model_evict.add(Activation('sigmoid'))
model_evict.add(Dense(nb_actions))
model_evict.add(Activation(output_activation))
print(model_evict.summary())
#model_evict.compile(optimizer = 'adam', loss = huber_loss_mean)
model_evict.compile(optimizer='adam', loss=tf.keras.losses.Huber())

if use_target_model == True:
    target_model_evict = Sequential()
    target_model_evict.add(Dense(16, input_dim=input_len))
    target_model_evict.add(Activation('sigmoid'))
    target_model_evict.add(Dense(32))
    target_model_evict.add(Activation('sigmoid'))
    target_model_evict.add(Dense(64))
    target_model_evict.add(Activation('sigmoid'))
    target_model_evict.add(Dense(128))
    target_model_evict.add(Activation('sigmoid'))
    target_model_evict.add(Dense(64))
    target_model_evict.add(Activation('sigmoid'))
    target_model_evict.add(Dense(32))
    target_model_evict.add(Activation('sigmoid'))
    target_model_evict.add(Dense(nb_actions))
    target_model_evict.add(Activation(output_activation))
    print(model_evict.summary())
    #target_model_evict.compile(optimizer = 'adam', loss = huber_loss_mean)
    #target_model_evict.compile(optimizer=optimizer, loss=tf.keras.losses.Huber())
    target_model_evict.compile(optimizer='adam', loss=tf.keras.losses.Huber())

if args.load_evict_weights_from_file is None == False:
    model_evict.load_weights(args.load_evict_weights_from_file)

model_add = Sequential()
model_add.add(Dense(16,input_dim = input_len))
model_add.add(Activation('sigmoid'))
model_add.add(Dense(32))
model_add.add(Activation('sigmoid'))
model_add.add(Dense(64))
model_add.add(Activation('sigmoid'))
model_add.add(Dense(128))
model_add.add(Activation('sigmoid'))
model_add.add(Dense(64))
model_add.add(Activation('sigmoid'))
model_add.add(Dense(32))
model_add.add(Activation('sigmoid'))
model_add.add(Dense(nb_actions))
model_add.add(Activation(output_activation))
print(model_add.summary())
#model_add.compile(optimizer = 'adam', loss = huber_loss_mean)
model_add.compile(optimizer='adam', loss=tf.keras.losses.Huber())

if use_target_model == True:
    target_model_add = Sequential()
    target_model_add.add(Dense(16,input_dim = input_len))
    target_model_add.add(Activation('sigmoid'))
    target_model_add.add(Dense(32))
    target_model_add.add(Activation('sigmoid'))
    target_model_add.add(Dense(64))
    target_model_add.add(Activation('sigmoid'))
    target_model_add.add(Dense(128))
    target_model_add.add(Activation('sigmoid'))
    target_model_add.add(Dense(64))
    target_model_add.add(Activation('sigmoid'))
    target_model_add.add(Dense(32))
    target_model_add.add(Activation('sigmoid'))
    target_model_add.add(Dense(nb_actions))
    target_model_add.add(Activation(output_activation))
    print(model_add.summary())
    #target_model_add.compile(optimizer = 'adam', loss = huber_loss_mean)
    target_model_add.compile(optimizer='adam', loss=tf.keras.losses.Huber())


if args.load_add_weights_from_file is None == False:
    model_add.load_weights(args.load_add_weights_from_file)


'''

'''
def mellowmax(omega, x):
    sum_ = sum((math.exp(omega * val) for val in x))
    return math.log(sum_/len(x))/omega

def huber_loss(y_true, y_pred, clip_delta=1.0):
    error = y_true - y_pred
    cond  = tf.keras.backend.abs(error) < clip_delta

    squared_loss = 0.5 * tf.keras.backend.square(error)
    linear_loss  = clip_delta * (tf.keras.backend.abs(error) - 0.5 * clip_delta)

    return tf.where(cond, squared_loss, linear_loss)

def huber_loss_mean(y_true, y_pred, clip_delta=1.0):
    return tf.keras.backend.mean(huber_loss(y_true, y_pred, clip_delta))
'''