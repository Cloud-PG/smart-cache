syntax = "proto3";

import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "io.grpc.cache.sim.service";
option java_outer_classname = "CacheSimService";

package simservice;

// Service to interact with the simulated cache
service SimService {

  // Requeste a file to the simulated cache
  rpc SimGet(SimCommonFile) returns (ActionResult) {}
  // Clear the cache, files, statistics and so on.
  rpc SimClear(google.protobuf.Empty) returns (SimCacheStatus) {}
  // Clear only the files in the cache
  rpc SimClearFiles(google.protobuf.Empty) returns (SimCacheStatus) {}
  // Reset only the statistics of the simulated cache
  rpc SimClearHitMissStats(google.protobuf.Empty) returns (SimCacheStatus) {}
  // Retrieve the simulated cache status
  rpc SimGetInfoCacheStatus(google.protobuf.Empty) returns (SimCacheStatus) {}
  // Save the state of the current simulated cache
  rpc SimDumps(google.protobuf.Empty) returns (stream SimDumpRecord) {}
  // Load a previuos saved state of the cache
  rpc SimLoads(stream SimDumpRecord) returns (google.protobuf.Empty) {}

}

// TODO: add struct and method for remote dataset creation (GetReport -> SimGetReport)

message ActionResult {
  string filename = 1;
  bool added = 2;
}

message SimCacheStatus {
  float hitRate = 1;
  float weightedHitRate = 2;
  float hitOverMiss = 3;
  float size = 4;
  float capacity = 5;
  float dataWritten = 6;
  float dataRead = 7;
  float dataReadOnHit = 8;
  float dataReadOnMiss = 9;
  float dataDeleted = 10;
}

message SimCommonFile {
  string filename = 1;
  float size = 2;
}

message SimDumpRecord {
  bytes raw = 1;
}
