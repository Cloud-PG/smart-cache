// Code generated by protoc-gen-go. DO NOT EDIT.
// source: simService/simService.proto

package simservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ActionResult struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Added                bool     `protobuf:"varint,2,opt,name=added,proto3" json:"added,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionResult) Reset()         { *m = ActionResult{} }
func (m *ActionResult) String() string { return proto.CompactTextString(m) }
func (*ActionResult) ProtoMessage()    {}
func (*ActionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cb65478f01afe7, []int{0}
}

func (m *ActionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionResult.Unmarshal(m, b)
}
func (m *ActionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionResult.Marshal(b, m, deterministic)
}
func (m *ActionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionResult.Merge(m, src)
}
func (m *ActionResult) XXX_Size() int {
	return xxx_messageInfo_ActionResult.Size(m)
}
func (m *ActionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionResult.DiscardUnknown(m)
}

var xxx_messageInfo_ActionResult proto.InternalMessageInfo

func (m *ActionResult) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *ActionResult) GetAdded() bool {
	if m != nil {
		return m.Added
	}
	return false
}

type SimCacheStatus struct {
	HitRate              float32  `protobuf:"fixed32,1,opt,name=hitRate,proto3" json:"hitRate,omitempty"`
	WeightedHitRate      float32  `protobuf:"fixed32,2,opt,name=weightedHitRate,proto3" json:"weightedHitRate,omitempty"`
	HitOverMiss          float32  `protobuf:"fixed32,3,opt,name=hitOverMiss,proto3" json:"hitOverMiss,omitempty"`
	Size                 float32  `protobuf:"fixed32,4,opt,name=size,proto3" json:"size,omitempty"`
	Capacity             float32  `protobuf:"fixed32,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
	WrittenData          float32  `protobuf:"fixed32,6,opt,name=writtenData,proto3" json:"writtenData,omitempty"`
	ReadOnHit            float32  `protobuf:"fixed32,7,opt,name=readOnHit,proto3" json:"readOnHit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimCacheStatus) Reset()         { *m = SimCacheStatus{} }
func (m *SimCacheStatus) String() string { return proto.CompactTextString(m) }
func (*SimCacheStatus) ProtoMessage()    {}
func (*SimCacheStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cb65478f01afe7, []int{1}
}

func (m *SimCacheStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimCacheStatus.Unmarshal(m, b)
}
func (m *SimCacheStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimCacheStatus.Marshal(b, m, deterministic)
}
func (m *SimCacheStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimCacheStatus.Merge(m, src)
}
func (m *SimCacheStatus) XXX_Size() int {
	return xxx_messageInfo_SimCacheStatus.Size(m)
}
func (m *SimCacheStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SimCacheStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SimCacheStatus proto.InternalMessageInfo

func (m *SimCacheStatus) GetHitRate() float32 {
	if m != nil {
		return m.HitRate
	}
	return 0
}

func (m *SimCacheStatus) GetWeightedHitRate() float32 {
	if m != nil {
		return m.WeightedHitRate
	}
	return 0
}

func (m *SimCacheStatus) GetHitOverMiss() float32 {
	if m != nil {
		return m.HitOverMiss
	}
	return 0
}

func (m *SimCacheStatus) GetSize() float32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SimCacheStatus) GetCapacity() float32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *SimCacheStatus) GetWrittenData() float32 {
	if m != nil {
		return m.WrittenData
	}
	return 0
}

func (m *SimCacheStatus) GetReadOnHit() float32 {
	if m != nil {
		return m.ReadOnHit
	}
	return 0
}

type SimCommonFile struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Size                 float32  `protobuf:"fixed32,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimCommonFile) Reset()         { *m = SimCommonFile{} }
func (m *SimCommonFile) String() string { return proto.CompactTextString(m) }
func (*SimCommonFile) ProtoMessage()    {}
func (*SimCommonFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cb65478f01afe7, []int{2}
}

func (m *SimCommonFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimCommonFile.Unmarshal(m, b)
}
func (m *SimCommonFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimCommonFile.Marshal(b, m, deterministic)
}
func (m *SimCommonFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimCommonFile.Merge(m, src)
}
func (m *SimCommonFile) XXX_Size() int {
	return xxx_messageInfo_SimCommonFile.Size(m)
}
func (m *SimCommonFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SimCommonFile.DiscardUnknown(m)
}

var xxx_messageInfo_SimCommonFile proto.InternalMessageInfo

func (m *SimCommonFile) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *SimCommonFile) GetSize() float32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type SimFileWeight struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Weight               float32  `protobuf:"fixed32,2,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimFileWeight) Reset()         { *m = SimFileWeight{} }
func (m *SimFileWeight) String() string { return proto.CompactTextString(m) }
func (*SimFileWeight) ProtoMessage()    {}
func (*SimFileWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cb65478f01afe7, []int{3}
}

func (m *SimFileWeight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimFileWeight.Unmarshal(m, b)
}
func (m *SimFileWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimFileWeight.Marshal(b, m, deterministic)
}
func (m *SimFileWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimFileWeight.Merge(m, src)
}
func (m *SimFileWeight) XXX_Size() int {
	return xxx_messageInfo_SimFileWeight.Size(m)
}
func (m *SimFileWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_SimFileWeight.DiscardUnknown(m)
}

var xxx_messageInfo_SimFileWeight proto.InternalMessageInfo

func (m *SimFileWeight) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *SimFileWeight) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type SimFileStats struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Size                 float32  `protobuf:"fixed32,2,opt,name=size,proto3" json:"size,omitempty"`
	TotReq               uint32   `protobuf:"varint,3,opt,name=totReq,proto3" json:"totReq,omitempty"`
	NHits                uint32   `protobuf:"varint,4,opt,name=nHits,proto3" json:"nHits,omitempty"`
	NMiss                uint32   `protobuf:"varint,5,opt,name=nMiss,proto3" json:"nMiss,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimFileStats) Reset()         { *m = SimFileStats{} }
func (m *SimFileStats) String() string { return proto.CompactTextString(m) }
func (*SimFileStats) ProtoMessage()    {}
func (*SimFileStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_20cb65478f01afe7, []int{4}
}

func (m *SimFileStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimFileStats.Unmarshal(m, b)
}
func (m *SimFileStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimFileStats.Marshal(b, m, deterministic)
}
func (m *SimFileStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimFileStats.Merge(m, src)
}
func (m *SimFileStats) XXX_Size() int {
	return xxx_messageInfo_SimFileStats.Size(m)
}
func (m *SimFileStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SimFileStats.DiscardUnknown(m)
}

var xxx_messageInfo_SimFileStats proto.InternalMessageInfo

func (m *SimFileStats) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *SimFileStats) GetSize() float32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SimFileStats) GetTotReq() uint32 {
	if m != nil {
		return m.TotReq
	}
	return 0
}

func (m *SimFileStats) GetNHits() uint32 {
	if m != nil {
		return m.NHits
	}
	return 0
}

func (m *SimFileStats) GetNMiss() uint32 {
	if m != nil {
		return m.NMiss
	}
	return 0
}

func init() {
	proto.RegisterType((*ActionResult)(nil), "simservice.ActionResult")
	proto.RegisterType((*SimCacheStatus)(nil), "simservice.SimCacheStatus")
	proto.RegisterType((*SimCommonFile)(nil), "simservice.SimCommonFile")
	proto.RegisterType((*SimFileWeight)(nil), "simservice.SimFileWeight")
	proto.RegisterType((*SimFileStats)(nil), "simservice.SimFileStats")
}

func init() { proto.RegisterFile("simService/simService.proto", fileDescriptor_20cb65478f01afe7) }

var fileDescriptor_20cb65478f01afe7 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0xb4, 0x49, 0xd3, 0xa1, 0xa1, 0xd2, 0xaa, 0x44, 0x5b, 0x97, 0x43, 0xe4, 0x53,
	0x4e, 0x1b, 0x04, 0x0f, 0xd0, 0xd2, 0xf2, 0xa7, 0x48, 0x54, 0x41, 0xf6, 0x81, 0xf3, 0xd6, 0x9e,
	0x24, 0x2b, 0xc5, 0xde, 0xe0, 0x9d, 0xb4, 0x2a, 0x47, 0x9e, 0x8f, 0xe7, 0xe0, 0x39, 0xd0, 0xee,
	0x3a, 0xb1, 0x89, 0x48, 0x05, 0xbd, 0xf9, 0xfb, 0x66, 0xfc, 0xd3, 0xcc, 0xec, 0x07, 0x67, 0x46,
	0xe5, 0x09, 0x96, 0x77, 0x2a, 0xc5, 0x71, 0xfd, 0x29, 0x96, 0xa5, 0x26, 0xcd, 0xc0, 0xa8, 0xdc,
	0x78, 0x27, 0x3c, 0x9b, 0x69, 0x3d, 0x5b, 0xe0, 0xd8, 0x55, 0x6e, 0x57, 0xd3, 0x31, 0xe6, 0x4b,
	0x7a, 0xf0, 0x8d, 0xd1, 0x05, 0x1c, 0xbd, 0x4d, 0x49, 0xe9, 0x22, 0x46, 0xb3, 0x5a, 0x10, 0x0b,
	0xa1, 0x37, 0x55, 0x0b, 0x2c, 0x64, 0x8e, 0x3c, 0x18, 0x06, 0xa3, 0xc3, 0x78, 0xa3, 0xd9, 0x09,
	0x74, 0x64, 0x96, 0x61, 0xc6, 0xdb, 0xc3, 0x60, 0xd4, 0x8b, 0xbd, 0x88, 0x7e, 0x05, 0xf0, 0x3c,
	0x51, 0xf9, 0x95, 0x4c, 0xe7, 0x98, 0x90, 0xa4, 0x95, 0x61, 0x1c, 0x0e, 0xe6, 0x8a, 0x62, 0x49,
	0x9e, 0xd1, 0x8e, 0xd7, 0x92, 0x8d, 0xe0, 0xf8, 0x1e, 0xd5, 0x6c, 0x4e, 0x98, 0x5d, 0x57, 0x1d,
	0x6d, 0xd7, 0xb1, 0x6d, 0xb3, 0x21, 0x3c, 0x9b, 0x2b, 0x9a, 0xdc, 0x61, 0x79, 0xa3, 0x8c, 0xe1,
	0x7b, 0xae, 0xab, 0x69, 0x31, 0x06, 0xfb, 0x46, 0x7d, 0x47, 0xbe, 0xef, 0x4a, 0xee, 0xdb, 0x8e,
	0x9f, 0xca, 0xa5, 0x4c, 0x15, 0x3d, 0xf0, 0x8e, 0xf3, 0x37, 0xda, 0x12, 0xef, 0x4b, 0x45, 0x84,
	0xc5, 0x3b, 0x49, 0x92, 0x77, 0x3d, 0xb1, 0x61, 0xb1, 0x97, 0x70, 0x58, 0xa2, 0xcc, 0x26, 0xc5,
	0xb5, 0x22, 0x7e, 0xe0, 0xea, 0xb5, 0x11, 0x9d, 0x43, 0xdf, 0xee, 0xa9, 0xf3, 0x5c, 0x17, 0x1f,
	0xd4, 0x02, 0x1f, 0xbd, 0xd5, 0x7a, 0xb8, 0x76, 0x3d, 0x5c, 0x74, 0xe5, 0x00, 0xf6, 0xd7, 0xaf,
	0x6e, 0xd9, 0x47, 0x01, 0x03, 0xe8, 0xfa, 0x93, 0x54, 0x88, 0x4a, 0x45, 0x3f, 0x02, 0x38, 0xaa,
	0x28, 0xf6, 0xda, 0xe6, 0x7f, 0xa7, 0xb0, 0x60, 0xd2, 0x14, 0xe3, 0x37, 0x77, 0xd3, 0x7e, 0x5c,
	0x29, 0xfb, 0xba, 0x76, 0x4d, 0xe3, 0xee, 0xd9, 0x8f, 0xbd, 0x70, 0xae, 0x7b, 0x80, 0x4e, 0xe5,
	0x5a, 0xf1, 0xfa, 0xe7, 0x1e, 0x40, 0xb2, 0xc9, 0x1c, 0x3b, 0x87, 0x6e, 0xa2, 0xf2, 0x8f, 0x48,
	0xec, 0x54, 0xd4, 0xc1, 0x13, 0x7f, 0x5c, 0x2b, 0xe4, 0xcd, 0x52, 0x33, 0x73, 0x51, 0x8b, 0x5d,
	0x40, 0x2f, 0x51, 0x79, 0x8c, 0x06, 0x89, 0x0d, 0x84, 0xcf, 0xab, 0x58, 0xe7, 0x55, 0xbc, 0xb7,
	0x79, 0x0d, 0xc3, 0x6d, 0x74, 0x1d, 0xb8, 0xa8, 0xc5, 0x6e, 0xe0, 0x85, 0x1f, 0xe1, 0x53, 0x31,
	0xd5, 0xcd, 0x2c, 0x3e, 0x15, 0x77, 0xb2, 0x85, 0xb3, 0x3b, 0xec, 0xa6, 0xed, 0xde, 0x3b, 0x6a,
	0xbd, 0x0a, 0xd8, 0x04, 0x06, 0x35, 0xce, 0x91, 0x7c, 0x02, 0xfe, 0x1d, 0x58, 0xa7, 0xc6, 0x01,
	0x3f, 0x37, 0xe7, 0x73, 0x40, 0x1f, 0x86, 0x5d, 0x38, 0xfe, 0x17, 0x9c, 0xfb, 0xc3, 0xd2, 0x2e,
	0x05, 0x9c, 0x2a, 0x2d, 0x66, 0xe5, 0x32, 0x15, 0xa9, 0xdd, 0xd5, 0x36, 0x8b, 0xaa, 0xfb, 0xf2,
	0xd8, 0x5f, 0x66, 0xf3, 0xda, 0x5f, 0x82, 0xdb, 0xae, 0xa3, 0xbf, 0xf9, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x5f, 0xc6, 0x5d, 0xb8, 0x83, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SimServiceClient is the client API for SimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SimServiceClient interface {
	SimGet(ctx context.Context, in *SimCommonFile, opts ...grpc.CallOption) (*ActionResult, error)
	SimReset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimCacheStatus, error)
	SimGetInfoCacheStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimCacheStatus, error)
	SimGetInfoCacheFiles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SimService_SimGetInfoCacheFilesClient, error)
	SimGetInfoFilesWeights(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SimService_SimGetInfoFilesWeightsClient, error)
	SimGetInfoFilesStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SimService_SimGetInfoFilesStatsClient, error)
}

type simServiceClient struct {
	cc *grpc.ClientConn
}

func NewSimServiceClient(cc *grpc.ClientConn) SimServiceClient {
	return &simServiceClient{cc}
}

func (c *simServiceClient) SimGet(ctx context.Context, in *SimCommonFile, opts ...grpc.CallOption) (*ActionResult, error) {
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, "/simservice.SimService/SimGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simServiceClient) SimReset(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimCacheStatus, error) {
	out := new(SimCacheStatus)
	err := c.cc.Invoke(ctx, "/simservice.SimService/SimReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simServiceClient) SimGetInfoCacheStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimCacheStatus, error) {
	out := new(SimCacheStatus)
	err := c.cc.Invoke(ctx, "/simservice.SimService/SimGetInfoCacheStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simServiceClient) SimGetInfoCacheFiles(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SimService_SimGetInfoCacheFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimService_serviceDesc.Streams[0], "/simservice.SimService/SimGetInfoCacheFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &simServiceSimGetInfoCacheFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimService_SimGetInfoCacheFilesClient interface {
	Recv() (*SimCommonFile, error)
	grpc.ClientStream
}

type simServiceSimGetInfoCacheFilesClient struct {
	grpc.ClientStream
}

func (x *simServiceSimGetInfoCacheFilesClient) Recv() (*SimCommonFile, error) {
	m := new(SimCommonFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simServiceClient) SimGetInfoFilesWeights(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SimService_SimGetInfoFilesWeightsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimService_serviceDesc.Streams[1], "/simservice.SimService/SimGetInfoFilesWeights", opts...)
	if err != nil {
		return nil, err
	}
	x := &simServiceSimGetInfoFilesWeightsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimService_SimGetInfoFilesWeightsClient interface {
	Recv() (*SimFileWeight, error)
	grpc.ClientStream
}

type simServiceSimGetInfoFilesWeightsClient struct {
	grpc.ClientStream
}

func (x *simServiceSimGetInfoFilesWeightsClient) Recv() (*SimFileWeight, error) {
	m := new(SimFileWeight)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *simServiceClient) SimGetInfoFilesStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (SimService_SimGetInfoFilesStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SimService_serviceDesc.Streams[2], "/simservice.SimService/SimGetInfoFilesStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &simServiceSimGetInfoFilesStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SimService_SimGetInfoFilesStatsClient interface {
	Recv() (*SimFileStats, error)
	grpc.ClientStream
}

type simServiceSimGetInfoFilesStatsClient struct {
	grpc.ClientStream
}

func (x *simServiceSimGetInfoFilesStatsClient) Recv() (*SimFileStats, error) {
	m := new(SimFileStats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SimServiceServer is the server API for SimService service.
type SimServiceServer interface {
	SimGet(context.Context, *SimCommonFile) (*ActionResult, error)
	SimReset(context.Context, *empty.Empty) (*SimCacheStatus, error)
	SimGetInfoCacheStatus(context.Context, *empty.Empty) (*SimCacheStatus, error)
	SimGetInfoCacheFiles(*empty.Empty, SimService_SimGetInfoCacheFilesServer) error
	SimGetInfoFilesWeights(*empty.Empty, SimService_SimGetInfoFilesWeightsServer) error
	SimGetInfoFilesStats(*empty.Empty, SimService_SimGetInfoFilesStatsServer) error
}

// UnimplementedSimServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSimServiceServer struct {
}

func (*UnimplementedSimServiceServer) SimGet(ctx context.Context, req *SimCommonFile) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimGet not implemented")
}
func (*UnimplementedSimServiceServer) SimReset(ctx context.Context, req *empty.Empty) (*SimCacheStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimReset not implemented")
}
func (*UnimplementedSimServiceServer) SimGetInfoCacheStatus(ctx context.Context, req *empty.Empty) (*SimCacheStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimGetInfoCacheStatus not implemented")
}
func (*UnimplementedSimServiceServer) SimGetInfoCacheFiles(req *empty.Empty, srv SimService_SimGetInfoCacheFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method SimGetInfoCacheFiles not implemented")
}
func (*UnimplementedSimServiceServer) SimGetInfoFilesWeights(req *empty.Empty, srv SimService_SimGetInfoFilesWeightsServer) error {
	return status.Errorf(codes.Unimplemented, "method SimGetInfoFilesWeights not implemented")
}
func (*UnimplementedSimServiceServer) SimGetInfoFilesStats(req *empty.Empty, srv SimService_SimGetInfoFilesStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method SimGetInfoFilesStats not implemented")
}

func RegisterSimServiceServer(s *grpc.Server, srv SimServiceServer) {
	s.RegisterService(&_SimService_serviceDesc, srv)
}

func _SimService_SimGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimCommonFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).SimGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simservice.SimService/SimGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).SimGet(ctx, req.(*SimCommonFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimService_SimReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).SimReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simservice.SimService/SimReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).SimReset(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimService_SimGetInfoCacheStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimServiceServer).SimGetInfoCacheStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simservice.SimService/SimGetInfoCacheStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimServiceServer).SimGetInfoCacheStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimService_SimGetInfoCacheFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimServiceServer).SimGetInfoCacheFiles(m, &simServiceSimGetInfoCacheFilesServer{stream})
}

type SimService_SimGetInfoCacheFilesServer interface {
	Send(*SimCommonFile) error
	grpc.ServerStream
}

type simServiceSimGetInfoCacheFilesServer struct {
	grpc.ServerStream
}

func (x *simServiceSimGetInfoCacheFilesServer) Send(m *SimCommonFile) error {
	return x.ServerStream.SendMsg(m)
}

func _SimService_SimGetInfoFilesWeights_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimServiceServer).SimGetInfoFilesWeights(m, &simServiceSimGetInfoFilesWeightsServer{stream})
}

type SimService_SimGetInfoFilesWeightsServer interface {
	Send(*SimFileWeight) error
	grpc.ServerStream
}

type simServiceSimGetInfoFilesWeightsServer struct {
	grpc.ServerStream
}

func (x *simServiceSimGetInfoFilesWeightsServer) Send(m *SimFileWeight) error {
	return x.ServerStream.SendMsg(m)
}

func _SimService_SimGetInfoFilesStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SimServiceServer).SimGetInfoFilesStats(m, &simServiceSimGetInfoFilesStatsServer{stream})
}

type SimService_SimGetInfoFilesStatsServer interface {
	Send(*SimFileStats) error
	grpc.ServerStream
}

type simServiceSimGetInfoFilesStatsServer struct {
	grpc.ServerStream
}

func (x *simServiceSimGetInfoFilesStatsServer) Send(m *SimFileStats) error {
	return x.ServerStream.SendMsg(m)
}

var _SimService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simservice.SimService",
	HandlerType: (*SimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimGet",
			Handler:    _SimService_SimGet_Handler,
		},
		{
			MethodName: "SimReset",
			Handler:    _SimService_SimReset_Handler,
		},
		{
			MethodName: "SimGetInfoCacheStatus",
			Handler:    _SimService_SimGetInfoCacheStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SimGetInfoCacheFiles",
			Handler:       _SimService_SimGetInfoCacheFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SimGetInfoFilesWeights",
			Handler:       _SimService_SimGetInfoFilesWeights_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SimGetInfoFilesStats",
			Handler:       _SimService_SimGetInfoFilesStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "simService/simService.proto",
}
