// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pluginProto/pluginService.proto

package pluginservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileRequest struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Size                 float32  `protobuf:"fixed32,2,opt,name=size,proto3" json:"size,omitempty"`
	Hit                  bool     `protobuf:"varint,3,opt,name=hit,proto3" json:"hit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileRequest) Reset()         { *m = FileRequest{} }
func (m *FileRequest) String() string { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()    {}
func (*FileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c71fffc00a713b, []int{0}
}

func (m *FileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileRequest.Unmarshal(m, b)
}
func (m *FileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileRequest.Marshal(b, m, deterministic)
}
func (m *FileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRequest.Merge(m, src)
}
func (m *FileRequest) XXX_Size() int {
	return xxx_messageInfo_FileRequest.Size(m)
}
func (m *FileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileRequest proto.InternalMessageInfo

func (m *FileRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileRequest) GetSize() float32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileRequest) GetHit() bool {
	if m != nil {
		return m.Hit
	}
	return false
}

type FileHint struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Store                bool     `protobuf:"varint,2,opt,name=store,proto3" json:"store,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileHint) Reset()         { *m = FileHint{} }
func (m *FileHint) String() string { return proto.CompactTextString(m) }
func (*FileHint) ProtoMessage()    {}
func (*FileHint) Descriptor() ([]byte, []int) {
	return fileDescriptor_30c71fffc00a713b, []int{1}
}

func (m *FileHint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileHint.Unmarshal(m, b)
}
func (m *FileHint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileHint.Marshal(b, m, deterministic)
}
func (m *FileHint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileHint.Merge(m, src)
}
func (m *FileHint) XXX_Size() int {
	return xxx_messageInfo_FileHint.Size(m)
}
func (m *FileHint) XXX_DiscardUnknown() {
	xxx_messageInfo_FileHint.DiscardUnknown(m)
}

var xxx_messageInfo_FileHint proto.InternalMessageInfo

func (m *FileHint) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FileHint) GetStore() bool {
	if m != nil {
		return m.Store
	}
	return false
}

func init() {
	proto.RegisterType((*FileRequest)(nil), "pluginservice.FileRequest")
	proto.RegisterType((*FileHint)(nil), "pluginservice.FileHint")
}

func init() { proto.RegisterFile("pluginProto/pluginService.proto", fileDescriptor_30c71fffc00a713b) }

var fileDescriptor_30c71fffc00a713b = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xbb, 0xad, 0x7f, 0xe2, 0xd4, 0x82, 0x2c, 0xa2, 0x21, 0x0a, 0x86, 0x9c, 0x72, 0xda,
	0x80, 0x5e, 0x3d, 0x94, 0x8a, 0x7f, 0x6e, 0x86, 0x2d, 0x7e, 0x80, 0x34, 0x4e, 0xd3, 0x85, 0x34,
	0x1b, 0xb3, 0x13, 0xa1, 0x7e, 0x52, 0x3f, 0x8e, 0x6c, 0xb6, 0x4a, 0x0b, 0xb6, 0xb7, 0xd9, 0x37,
	0xb3, 0x3f, 0xde, 0x7b, 0x70, 0x53, 0x97, 0x6d, 0xa1, 0xaa, 0xb4, 0xd1, 0xa4, 0x13, 0x37, 0x4f,
	0xb1, 0xf9, 0x54, 0x39, 0x8a, 0xda, 0x6a, 0x7c, 0xe4, 0x44, 0xe3, 0xc4, 0xe0, 0xaa, 0xd0, 0xba,
	0x28, 0x31, 0xe9, 0x96, 0xb3, 0x76, 0x9e, 0xe0, 0xb2, 0xa6, 0x95, 0xbb, 0x8d, 0x5e, 0x61, 0xf8,
	0xa4, 0x4a, 0x94, 0xf8, 0xd1, 0xa2, 0x21, 0x1e, 0x80, 0x37, 0x57, 0x25, 0x56, 0xd9, 0x12, 0x7d,
	0x16, 0xb2, 0xf8, 0x44, 0xfe, 0xbd, 0x39, 0x87, 0x03, 0xa3, 0xbe, 0xd0, 0xef, 0x87, 0x2c, 0xee,
	0xcb, 0x6e, 0xe6, 0x67, 0x30, 0x58, 0x28, 0xf2, 0x07, 0x21, 0x8b, 0x3d, 0x69, 0xc7, 0xe8, 0x1e,
	0x3c, 0x0b, 0x7c, 0x51, 0xd5, 0x7e, 0xda, 0x39, 0x1c, 0x1a, 0xd2, 0x8d, 0xc3, 0x79, 0xd2, 0x3d,
	0x6e, 0xbf, 0x19, 0x8c, 0xd2, 0xcd, 0x48, 0x7c, 0x0c, 0xc7, 0xcf, 0x48, 0x0e, 0x27, 0xb6, 0x82,
	0x89, 0x0d, 0xe3, 0xc1, 0xe5, 0x3f, 0x3b, 0xfb, 0x29, 0xea, 0xf1, 0x07, 0x18, 0xbe, 0xd5, 0xef,
	0x19, 0xe1, 0x94, 0x32, 0x32, 0x7b, 0x29, 0x17, 0xc2, 0x75, 0x25, 0x7e, 0xbb, 0x12, 0x8f, 0xb6,
	0xab, 0xa8, 0xc7, 0xc7, 0x70, 0x2a, 0xd1, 0x58, 0x23, 0xd6, 0xe8, 0x8a, 0xef, 0xb8, 0xdc, 0x4d,
	0x98, 0x24, 0x70, 0xad, 0xb4, 0x28, 0x9a, 0x3a, 0x17, 0x79, 0x96, 0x2f, 0x70, 0x6d, 0x43, 0xac,
	0x7d, 0x4c, 0xb6, 0x73, 0xa7, 0x6c, 0x76, 0xd4, 0x21, 0xee, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x6d, 0x4d, 0xfd, 0xf1, 0xf0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PluginServiceClient interface {
	GetHint(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileHint, error)
	UpdateStats(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ResetHistory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type pluginServiceClient struct {
	cc *grpc.ClientConn
}

func NewPluginServiceClient(cc *grpc.ClientConn) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) GetHint(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileHint, error) {
	out := new(FileHint)
	err := c.cc.Invoke(ctx, "/pluginservice.PluginService/GetHint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) UpdateStats(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pluginservice.PluginService/UpdateStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ResetHistory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pluginservice.PluginService/ResetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
type PluginServiceServer interface {
	GetHint(context.Context, *FileRequest) (*FileHint, error)
	UpdateStats(context.Context, *FileRequest) (*empty.Empty, error)
	ResetHistory(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedPluginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (*UnimplementedPluginServiceServer) GetHint(ctx context.Context, req *FileRequest) (*FileHint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHint not implemented")
}
func (*UnimplementedPluginServiceServer) UpdateStats(ctx context.Context, req *FileRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStats not implemented")
}
func (*UnimplementedPluginServiceServer) ResetHistory(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetHistory not implemented")
}

func RegisterPluginServiceServer(s *grpc.Server, srv PluginServiceServer) {
	s.RegisterService(&_PluginService_serviceDesc, srv)
}

func _PluginService_GetHint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetHint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginservice.PluginService/GetHint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetHint(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_UpdateStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).UpdateStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginservice.PluginService/UpdateStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).UpdateStats(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ResetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ResetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pluginservice.PluginService/ResetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ResetHistory(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PluginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pluginservice.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHint",
			Handler:    _PluginService_GetHint_Handler,
		},
		{
			MethodName: "UpdateStats",
			Handler:    _PluginService_UpdateStats_Handler,
		},
		{
			MethodName: "ResetHistory",
			Handler:    _PluginService_ResetHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pluginProto/pluginService.proto",
}
